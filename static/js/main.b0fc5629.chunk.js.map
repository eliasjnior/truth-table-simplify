{"version":3,"sources":["helpers/binary.ts","components/Table/index.tsx","App.tsx","index.tsx"],"names":["getBinValue","value","bits","Number","toString","intToBin","padStart","Table","useState","values","setValues","columns","setColumns","columnsArr","useMemo","Array","from","map","key","rows","Math","pow","rowsArr","conditional","rowValue","rowKey","binary","group","groupValue","groupKey","join","filter","it","parsedConditional","htmlParsedConditional","replace","simplifiedUri","encodeURIComponent","getCellClassName","useCallback","commonClassName","updateValue","bit","console","log","oldValue","newArr","removeColumn","oldColumns","max","addColumn","min","length","useEffect","className","column","row","onChange","e","target","onClick","role","dangerouslySetInnerHTML","__html","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0fc5629.chunk.js","sourcesContent":["export function intToBin(value: number): string {\n  return Number(value).toString(2)\n}\n\nexport function getBinValue(value: number, bits: number): string {\n  return intToBin(value).padStart(bits, '0')\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport { getBinValue } from '~/helpers/binary'\n\nimport './conditional.css'\n\nconst Table: React.FC = () => {\n  const keys = 'ABCDE'\n\n  const [values, setValues] = useState<Array<boolean>>([])\n  const [columns, setColumns] = useState<number>(3)\n\n  const columnsArr = useMemo(\n    () => Array.from(Array(columns)).map((value, key) => key),\n    [columns],\n  )\n  const rows = useMemo(() => Math.pow(2, columns), [columns])\n  const rowsArr = useMemo(\n    () => Array.from(Array(rows)).map((value, key) => key),\n    [rows],\n  )\n  const conditional = useMemo(\n    () =>\n      Array.from(values)\n        .map((rowValue, rowKey) => {\n          const binary = getBinValue(rowKey, columns)\n\n          return {\n            binary,\n            group: `( ${Array.from(binary)\n              .map((groupValue, groupKey) =>\n                groupValue === '1' ? keys[groupKey] : `!${keys[groupKey]}`,\n              )\n              .join(' && ')} )`,\n            value: rowValue,\n          }\n        })\n        .filter((it) => it.value),\n    [values, columns],\n  )\n\n  const parsedConditional = useMemo(\n    () => conditional.map((it) => it.group).join(' || '),\n    [conditional],\n  )\n\n  const htmlParsedConditional = useMemo(\n    () =>\n      parsedConditional\n        .replace(/\\|\\|/g, '<span class=\"conditional-or\">||</span>')\n        .replace(/\\(/g, '<span class=\"conditional-parentheses\">(</span>')\n        .replace(/\\)/g, '<span class=\"conditional-parentheses\">)</span>')\n        .replace(/&&/g, '<span class=\"conditional-and\">&&</span>'),\n    [parsedConditional],\n  )\n\n  const simplifiedUri = useMemo(\n    () =>\n      `https://www.wolframalpha.com/input/?i=${encodeURIComponent(\n        parsedConditional,\n      )}`,\n    [parsedConditional],\n  )\n\n  const getCellClassName = useCallback(\n    (commonClassName, value) =>\n      `${commonClassName} ${value ? 'bg-green-400' : 'bg-red-600 text-white'}`,\n    [],\n  )\n\n  const updateValue = useCallback((bit: number, value: boolean) => {\n    console.log('updateValue', bit, value)\n    setValues((oldValue) => {\n      const newArr = Array.from(oldValue)\n      newArr[bit] = value\n\n      return newArr\n    })\n  }, [])\n\n  const removeColumn = useCallback(() => {\n    setColumns((oldColumns) => Math.max(2, oldColumns - 1))\n  }, [])\n\n  const addColumn = useCallback(() => {\n    setColumns((oldColumns) => Math.min(keys.length, oldColumns + 1))\n  }, [])\n\n  useEffect(() => {\n    setValues((oldValue) =>\n      Array.from(Array(rows)).map((value, key) => oldValue[key] || false),\n    )\n  }, [rows])\n\n  return (\n    <div className=\"container mx-auto my-8\">\n      <table className=\"table-auto w-full\">\n        <thead>\n          <tr>\n            {columnsArr.map((column) => (\n              <th className=\"border px-4 py-2\" key={column}>\n                {keys[column]}\n              </th>\n            ))}\n            <th className=\"border px-4 py-2 bg-gray-200\">Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rowsArr.map((row) => (\n            <tr key={row}>\n              {columnsArr.map((column) => (\n                <td\n                  key={column}\n                  className={getCellClassName(\n                    'border px-4 py-2',\n                    getBinValue(row, columns)[column] === '1',\n                  )}\n                >\n                  {getBinValue(row, columns)[column] === '1' ? 'TRUE' : 'FALSE'}\n                </td>\n              ))}\n              <td className={getCellClassName('border px-4 py-2', values[row])}>\n                <select\n                  className=\"w-full p-2 bg-transparent outline-none\"\n                  value={values[row] ? 'TRUE' : 'FALSE'}\n                  onChange={(e) => updateValue(row, e.target.value === 'TRUE')}\n                >\n                  <option value=\"FALSE\">FALSE</option>\n                  <option value=\"TRUE\">TRUE</option>\n                </select>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <button\n        className=\"my-4 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\"\n        onClick={removeColumn}\n      >\n        Remove column\n      </button>\n\n      <button\n        className=\"my-4 ml-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n        onClick={addColumn}\n      >\n        Add column\n      </button>\n\n      <div\n        className=\"text-center bg-blue-500 text-white text-lg p-4\"\n        role=\"alert\"\n      >\n        <p\n          dangerouslySetInnerHTML={{\n            __html: htmlParsedConditional || `Result will always be FALSE.`,\n          }}\n        />\n      </div>\n\n      {parsedConditional && (\n        <div className=\"my-5 text-center\">\n          <a\n            className=\"bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n            target=\"blank\"\n            href={simplifiedUri}\n          >\n            Simplify\n          </a>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Table\n","import React from 'react'\n\nimport Table from '~/components/Table'\n\nconst App: React.FC = () => {\n  return <Table />\n}\n\nexport default App\n","import React from 'react'\n\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}